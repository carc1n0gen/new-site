1:HL["/_next/static/css/8cfaf464e5f7cbbf.css",{"as":"style"}]
0:["aKAPFSLzMQ_Wzw_SpXCtd",[[["",{"children":[["year","2023","d"],{"children":[["month","07","d"],{"children":[["day","22","d"],{"children":[["slug","how-i-used-recaptcha-in-nextjs","d"],{"children":["__PAGE__?{\"year\":\"2023\",\"month\":\"07\",\"day\":\"22\",\"slug\":\"how-i-used-recaptcha-in-nextjs\"}",{}]}]}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8cfaf464e5f7cbbf.css","precedence":"next"}]],["$L3",null]]]]]
4:I{"id":7095,"chunks":["95:static/chunks/95-b42e21927908bec6.js","224:static/chunks/224-45995354792692c9.js","106:static/chunks/app/[year]/[month]/[day]/[slug]/page-fd3e7a5daa90e646.js"],"name":"","async":false}
5:I{"id":7289,"chunks":["95:static/chunks/95-b42e21927908bec6.js","185:static/chunks/app/layout-766a84e56334bd88.js"],"name":"","async":false}
6:I{"id":9180,"chunks":["272:static/chunks/webpack-64f86ae5b723ecca.js","253:static/chunks/bce60fc1-3d7875a7a6202410.js","698:static/chunks/698-4595f783858dddc6.js"],"name":"default","async":false}
7:I{"id":2306,"chunks":["272:static/chunks/webpack-64f86ae5b723ecca.js","253:static/chunks/bce60fc1-3d7875a7a6202410.js","698:static/chunks/698-4595f783858dddc6.js"],"name":"default","async":false}
2:[["$","html",null,{"lang":"en","className":"dark:bg-black md:bg-zinc-50 md:dark:bg-zinc-800","children":[["$","link",null,{"rel":"alternate","type":"application/atom+xml","title":"Atom Feed for Carson's Blog","href":"/feed"}],["$","body",null,{"className":"text-zinc-700 dark:text-zinc-300","children":[["$","header",null,{"className":"bg-white dark:bg-black text-center md:text-left mt-5 md:mt-0 md:pt-10 border-b border-b-zinc-300 dark:border-b-zinc-600","children":[["$","div",null,{"className":"md:max-w-screen-md px-2 md:px-0 mx-auto","children":[["$","img",null,{"src":"/img/avatar-new.jpg","alt":"Avatar photo","className":"rounded-full mx-auto md:float-right md:-mt-4","width":"100","height":"100"}],["$","div",null,{"className":"mt-5","children":[["$","$L4",null,{"href":"/","className":"mt-2","children":["$","h1",null,{"className":"text-5xl font-bold","children":"Carson's Blog"}]}],["$","p",null,{"className":"mt-2","children":"Somewhat coherent tutorials about web stuff and things."}]]}]]}],["$","$L5",null,{}]]}],["$","main",null,{"className":"px-4 py-2 md:p-0 md:max-w-screen-md mx-auto","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":["$","section",null,{"className":"mt-6 p-6 bg-white border border-zinc-300","children":[["$","h1",null,{"className":"font-bold text-3xl mb-4","children":"Not Found"}],["$","p",null,{"children":"Are you lost? There doesn't seem to be anything here"}]]}],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children",["year","2023","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children",["year","2023","d"],"children",["month","07","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children",["year","2023","d"],"children",["month","07","d"],"children",["day","22","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children",["year","2023","d"],"children",["month","07","d"],"children",["day","22","d"],"children",["slug","how-i-used-recaptcha-in-nextjs","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8",null],"segment":"__PAGE__?{\"year\":\"2023\",\"month\":\"07\",\"day\":\"22\",\"slug\":\"how-i-used-recaptcha-in-nextjs\"}"},"styles":[]}],"segment":["slug","how-i-used-recaptcha-in-nextjs","d"]},"styles":[]}],"segment":["day","22","d"]},"styles":[]}],"segment":["month","07","d"]},"styles":[]}],"segment":["year","2023","d"]},"styles":[]}]}],["$","footer",null,{"className":"mt-6 mb-6 text-center","children":"Â© Carson Evans"}]]}]]}],null]
3:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"How I Used Google reCaptcha In NextJS - Carson's Blog"}],["$","meta","2",{"name":"description","content":"I recently migrated this website to NextJS and I ran in to a few hurdles along the way. Google reCaptcha gave me a few of those hurdles, and in this post I will explain how I overcame them."}],["$","meta","3",{"name":"keywords","content":"google recaptcha next nextjs react nodejs"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","5",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]]
d:I{"id":4368,"chunks":["95:static/chunks/95-b42e21927908bec6.js","224:static/chunks/224-45995354792692c9.js","106:static/chunks/app/[year]/[month]/[day]/[slug]/page-fd3e7a5daa90e646.js"],"name":"","async":false}
9:T7d4,<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>reCAPTCHA demo: Simple page<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.google.com/recaptcha/api.js&quot;</span> <span class="hljs-attr">async</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;?&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;g-recaptcha&quot;</span> <span class="hljs-attr">data-sitekey</span>=<span class="hljs-string">&quot;your_site_key&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>a:T547,<span class="hljs-keyword">import</span> <span class="hljs-title class_">ReCAPTCHA</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-google-recaptcha&quot;</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyForm</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">return</span> (
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;?&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">ReCAPTCHA</span> <span class="hljs-attr">sitekey</span>=<span class="hljs-string">&quot;your_site_key&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>
  );
}b:Tbab,<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyForm</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> [theme, setTheme] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;dark&quot;</span>);

  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-comment">// You can use matchMedia to detect if dark mode is enabled, and listen</span>
    <span class="hljs-comment">// for when it changes.</span>
    <span class="hljs-keyword">const</span> handler = <span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class="hljs-title function_">addEventListener</span>(
      <span class="hljs-string">&quot;change&quot;</span>,
      <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {
        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span>.<span class="hljs-property">matches</span>) {
          <span class="hljs-title function_">setTheme</span>(<span class="hljs-string">&quot;dark&quot;</span>);
        } <span class="hljs-keyword">else</span> {
          <span class="hljs-title function_">setTheme</span>(<span class="hljs-string">&quot;light&quot;</span>);
        }
      },
    );

    <span class="hljs-comment">// use the cleanup function to remove the event listener.</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">cleanup</span>(<span class="hljs-params"></span>) {
      <span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class="hljs-title function_">removeEventListener</span>(handler);
    };
  }, []);

  <span class="hljs-keyword">return</span> (
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;?&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">ReCAPTCHA</span> <span class="hljs-attr">sitekey</span>=<span class="hljs-string">&quot;your_site_key&quot;</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">{theme}</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>
  );
}c:Tc7c,<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyForm</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> [key, setKey] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// Our new key state variable</span>
  <span class="hljs-keyword">const</span> [theme, setTheme] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;dark&quot;</span>);

  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-keyword">const</span> handler = <span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class="hljs-title function_">addEventListener</span>(
      <span class="hljs-string">&quot;change&quot;</span>,
      <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {
        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span>.<span class="hljs-property">matches</span>) {
          <span class="hljs-title function_">setTheme</span>(<span class="hljs-string">&quot;dark&quot;</span>);
        } <span class="hljs-keyword">else</span> {
          <span class="hljs-title function_">setTheme</span>(<span class="hljs-string">&quot;light&quot;</span>);
        }

        <span class="hljs-comment">// update the key&#x27;s value</span>
        <span class="hljs-title function_">setKey</span>(key + <span class="hljs-number">1</span>);
      },
    );

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">cleanup</span>(<span class="hljs-params"></span>) {
      <span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class="hljs-title function_">removeEventListener</span>(handler);
    };
  }, [key]); <span class="hljs-comment">// Don&#x27;t forget to add key to the dependency array</span>

  <span class="hljs-keyword">return</span> (
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;?&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">ReCAPTCHA</span> <span class="hljs-attr">sitekey</span>=<span class="hljs-string">&quot;your_site_key&quot;</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">{theme}</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span>
  );
}8:["$","article",null,{"className":"mt-6 md:p-6 bg-white dark:bg-black md:border border-zinc-300 dark:border-zinc-600 undefined","children":[["$","header",null,{"children":[["$","$L4",null,{"href":"/2023/07/22/how-i-used-recaptcha-in-nextjs","children":["$","h2",null,{"className":"text-3xl font-bold mb-2","children":"How I Used Google reCaptcha In NextJS"}]}],["$","p",null,{"className":"mb-4 text-sm text-zinc-500","children":["posted by ","Carson Evans"," Â·"," ","Jul 22, 2023"]}]]}],["$","section",null,{"children":["I recently migrated this website to NextJS and I ran in to a few hurdles along the way. Google reCaptcha gave me a few of those hurdles, and in this post I will explain how I overcame them.","\n",["$","p",null,{"className":"my-4","children":"Also on a side note: gosh it's been ages since I bothered to touch this site,\nlet alone write a new post. Migrating to NextJS was a nice exercise in learning\nthe framework, and a way to bring enthusiasm about it back. I hope to keep it up\nand keep posting."}],"\n",["$","h2",null,{"className":"text-2xl font-bold mt-6 mb-2","children":"So What Were Those Hurdles?"}],"\n",["$","p",null,{"className":"my-4","children":"One of those hurdles was how NextJS (or maybe React in general?) deal with the\nvirtual DOM and changes made from outside scripts. Next will raise am error if\nelements appear in the DOM that it was not expecting. Another issue I ran in to\nwas related to dark/light mode. When I migrated to NextJS, I decided I would\nalso implement a dark mode. When you initialize google reCaptcha, you can pass\na theme option, but this is only set once and is probably not meant to change."}],"\n",["$","h2",null,{"className":"text-2xl font-bold mt-6 mb-2","children":"The Virtual DOM hurdle"}],"\n",["$","p",null,{"className":"my-4","children":"So in a plain html/js web page, you use google reCaptcha something like this:"}],"\n",["$","pre",null,{"className":"my-4 -mx-4 md:-mx-[24px]","children":["$","code",null,{"className":"hljs bg-zinc-100 dark:bg-zinc-700","dangerouslySetInnerHTML":{"__html":"$9"}}]}],"\n",["$","p",null,{"className":"my-4","children":["What happens here is once the reCaptcha script is loaded, it looks for an\nelement with the class ",["$","code",null,{"className":"font-bold","children":"g-recaptcha"}]," and injects additional things within it.\nThis causes unexpected nodes to be detected by NextJS and an error is thrown.\nLuckily there is a package that wraps this functionality in a React component to\navoid this sort of error. The package is called ",["$","a",null,{"href":"https://www.npmjs.com/package/react-google-recaptcha","className":"font-bold underline","children":"react-google-recaptcha"}],"\nand is used something like this:"]}],"\n",["$","pre",null,{"className":"my-4 -mx-4 md:-mx-[24px]","children":["$","code",null,{"className":"hljs bg-zinc-100 dark:bg-zinc-700","dangerouslySetInnerHTML":{"__html":"$a"}}]}],"\n",["$","p",null,{"className":"my-4","children":"With this, the reCaptcha is loaded, and now works just like before!"}],"\n",["$","h2",null,{"className":"text-2xl font-bold mt-6 mb-2","children":"The Dynamically Changing Theme Hurdle"}],"\n",["$","p",null,{"className":"my-4","children":["I wanted the reCaptcha to automatically change between dark and light based on\nthe system settings of the user. There are media queries in CSS for changing the\nlook based on this preference, but how the heck does one detect this preference\nwith JavaScript? Well I found a fancy function called ",["$","code",null,{"className":"font-bold","children":"matchMedia"}]," which is used\nfor detecting if anything matches a CSS selector. On top of this, we can use\nan event listener to detect if weather the selector matches ever changes like so:"]}],"\n",["$","pre",null,{"className":"my-4 -mx-4 md:-mx-[24px]","children":["$","code",null,{"className":"hljs bg-zinc-100 dark:bg-zinc-700","dangerouslySetInnerHTML":{"__html":"<span class=\"hljs-title function_\">matchMedia</span>(<span class=\"hljs-string\">&quot;(prefers-color-scheme: dark)&quot;</span>).<span class=\"hljs-title function_\">addEventListener</span>(\n  <span class=\"hljs-string\">&quot;change&quot;</span>,\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">matches</span>) {\n      <span class=\"hljs-comment\">// Changed to dark mode</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// Changed to light mode</span>\n    }\n  },\n);"}}]}],"\n",["$","p",null,{"className":"my-4","children":["The ",["$","code",null,{"className":"font-bold","children":"ReCAPTCHA"}]," component accepts a ",["$","code",null,{"className":"font-bold","children":"theme"}]," prop for choosing weather the\ncaptcha should look dark or light. I tried using a state variable in combination\nwith a useEffect hook and the above event handler to update the theme whenever\nthe system theme changes like this:"]}],"\n",["$","pre",null,{"className":"my-4 -mx-4 md:-mx-[24px]","children":["$","code",null,{"className":"hljs bg-zinc-100 dark:bg-zinc-700","dangerouslySetInnerHTML":{"__html":"$b"}}]}],"\n",["$","p",null,{"className":"my-4","children":["But this will not update the reCaptcha theme since it is meant to be initialized\njust once and then stay in that state. However react has a way to force a\ncomponent to re-mount, which will re-run all the stuff that happens within the\ncomponent. All components can be passed a ",["$","code",null,{"className":"font-bold","children":"key"}]," prop. If this key ever changes,\nthen the component it is passed to will re-mount. So I can use an additional\nstate variable for this key, and modify its value every time our theme change\nhandler is run:"]}],"\n",["$","pre",null,{"className":"my-4 -mx-4 md:-mx-[24px]","children":["$","code",null,{"className":"hljs bg-zinc-100 dark:bg-zinc-700","dangerouslySetInnerHTML":{"__html":"$c"}}]}],"\n",["$","p",null,{"className":"my-4","children":"Now the reCaptcha theme changes dynamically when the system colour theme\nchanges!"}],"\n",["$","p",null,{"className":"my-4","children":"This was just one of the many things I ran in to during my adventure of migrating\nmy blog to NextJS, and using NextJS to generate a static website. Stay tuned\nfor more!"}]]}],["$","footer",null,{"className":"mt-6","children":["$","$Ld",null,{"title":"How I Used Google reCaptcha In NextJS","postUrl":"/2023/07/22/how-i-used-recaptcha-in-nextjs"}]}]]}]
